package org.lipicalabs.lipica.core.kernel

import org.junit.runner.RunWith
import org.lipicalabs.lipica.core.utils.{DigestValue, ImmutableBytes}
import org.lipicalabs.lipica.core.vm.{DataWord, LogInfo}
import org.specs2.mutable.Specification
import org.specs2.runner.JUnitRunner

/**
 * Created by IntelliJ IDEA.
 * 2015/09/08 13:01
 * YANAGISAWA, Kentaro
 */

@RunWith(classOf[JUnitRunner])
class TransactionReceiptTest extends Specification {
	sequential


	"test (1)" should {
		"be right" in {
			val originalTx = Transaction.decode(ImmutableBytes.parseHexString("f85f800182520894000000000000000000000000000b9331677e6ebf0a801ca098ff921201554726367d2be8c804a7ff89ccf285ebc57dff8ae4c44b9c19ac4aa08887321be575c8095f789dd4c743dfe42c1820f9231f98a962b210e3ac2452a3"))

			val log = LogInfo(ImmutableBytes.create(20), Seq(DataWord.apply(7777)), ImmutableBytes.parseHexString("7777"))
			val receipt = TransactionReceipt(Seq(log), ImmutableBytes.asUnsignedByteArray(BigInt(999)), DigestValue.parseHexString("8888888888888888888888888888888888888888888888888888888888888888"))
			receipt.transaction = originalTx
			//receipt.cumulativeMana = ImmutableBytes.asUnsignedByteArray(BigInt(999))
			//receipt.postTxState = ImmutableBytes.parseHexString("1111")
			//receipt.setLogs(Seq(log))

			val encoded = receipt.encode
			val rebuilt = TransactionReceipt.decode(encoded)

//			val tx = rebuilt.transaction
//			tx.senderAddress.toHexString mustEqual "31bb58672e8bf7684108feeacf424ab62b873824"
//			tx.data.isEmpty mustEqual true
//			tx.manaLimit.toHexString mustEqual "5208"
//			tx.manaPrice.toHexString mustEqual "01"
//			tx.nonce.toHexString mustEqual "00"
//			tx.receiverAddress.toHexString mustEqual "000000000000000000000000000b9331677e6ebf"
//			tx.value.toHexString mustEqual "0a"
//			Hex.encodeHexString(Array(tx.signatureOption.get.v)) mustEqual "1c"
//			Hex.encodeHexString(ByteUtils.asUnsignedByteArray(tx.signatureOption.get.r)) mustEqual "98ff921201554726367d2be8c804a7ff89ccf285ebc57dff8ae4c44b9c19ac4a"
//			Hex.encodeHexString(ByteUtils.asUnsignedByteArray(tx.signatureOption.get.s)) mustEqual "8887321be575c8095f789dd4c743dfe42c1820f9231f98a962b210e3ac2452a3"

			rebuilt.cumulativeMana.toPositiveLong mustEqual 999L
			rebuilt.postTxState mustEqual DigestValue.parseHexString("8888888888888888888888888888888888888888888888888888888888888888")
			rebuilt.logs.size mustEqual 1
			rebuilt.logs.head.topics.size mustEqual 1
			rebuilt.logs.head.topics.head mustEqual DataWord(7777)
			rebuilt.logs.head.data mustEqual ImmutableBytes.parseHexString("7777")
		}
	}

//	"test(2)" should {
//		"be right" in {
//			val data = "f90244a0f5ff3fbd159773816a7c707a9b8cb6bb778b934a8f6466c7830ed970498f4b688301e848bdbda94cd2a3d9f938e13cd947ec05abc7fe734df8dd826c083a1a1a1"
//
//			val stateRoot = ImmutableBytes.parseHexString("f5ff3fbd159773816a7c707a9b8cb6bb778b934a8f6466c7830ed970498f4b68")
//			val manaUsed = ImmutableBytes.parseHexString("01E848")
//			val bloom: Bloom = Bloom(ImmutableBytes.parseHexStringtoByteArray)
//
//			val logInfo1 = new LogInfo(ImmutableBytes.parseHexString("cd2a3d9f938e13cd947ec05abc7fe734df8dd826"), Seq.empty, ImmutableBytes.parseHexString("a1a1a1"))
//			val logs = Seq(logInfo1)
//
//			val receipt = TransactionReceipt(stateRoot, manaUsed, bloom, logs)
//			receipt.encode.toHexString mustEqual data
//		}
//	}

}
