

peer.discovery = {

    # UDPによる自発的なピアディスカバリーを有効化するか否か。
    enabled = true

    # スレッド数。
    workers = 8

    # 起動時に既知のものとする既存ノード群。
    seed.nodes = [
        "enode://de471bccee3d042261d52e9bff31458daecc406142b401d4cd848f677479f73104b9fdeb090af9583d3391b7f10cb2ba9e26865dd5fca4fcdc0fb1e3b723c786@54.94.239.50:30303",
        "enode://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@52.16.188.185:30303",
        "enode://1118980bf48b0a3640bdba04e0fe78b1add18e1cd99bf22d53daac1fd9972ad650df52176e7c7d89d1114cfef2bc23a2959aa54998a46afcf7d91809f0855082@52.74.57.123:30303",
        "enode://b7d517166a28676bf12ead6c928b32e1910e4194993273cd58e61be23ab866e5ef0d0a9688573d82345439a5936da28a8690302f5238eb23163f05a907b4a5c2@158.69.192.255:30303"
    ]

    # 永続化するか否か。
    persist = true

    # 再接続間隔（秒）
    touch.period = 600

    # 接続の上限数
    touch.max.nodes = 100

    # 自ノード自身をアドバタイズ対象に含めるか否か。
    public.home.node = true
}

node {

    #capabilities = [lpc]

    # 外部ネットワークから見た、自ノードのIPアドレス。
    # nullの場合には、AWSのIPアドレス判定サービスによって自動判定する。
    external.address = null

    # bind対象とする、ローカルネットワーク内のアドレス。
    # 「0.0.0.0」でも構わない。
    # nullの場合には、インターネット上のアドレスに接続する際に利用される
    # ローカルアドレスとする。
    bind.address = null

    # TCPおよびUDP両方においてbindするポート番号。
    bind.port = 30303

    # 接続タイムアウト秒数。
    connect.timeout.seconds = 10

    # 読み取りタイムアウト秒数。
    read.timeout.seconds = 30

    # このノード自身の秘密鍵。
    # 32バイトの乱数を表す十六進表記64文字を指定する必要があります。
    # nullの場合は自動生成されますが、明示的に指定することを推奨します。
    private.key = null

    # 接続先ネットワークの識別子。
    network.id = 1
}

# Genesisブロックのリソース名。対応するファイルがJARファイル内に含まれている。
# 変えるべきだという理由がない限り変えないでください。
genesis = genesis1.json

# トランザクションがネットワークに受け入れられるまでに待つ秒数。
transaction.approve.timeout = 15

# 保留中トランザクションが削除されるまでの経過ブロック数。
transaction.outdated.threshold = 10


api.rest = {
    # REST APIサーバーを有効化するか否か。
    enabled = true

    # REST APIサーバーがbindするアドレス。
    # 「0.0.0.0」で構いません。
    bind.address = "0.0.0.0"

    # REST APIサーバーがbindするポート番号。
    bind.port = 37000
}

datastore {

    # 永続化対象の情報を保存するローカルデータベースが使用するディレクトリ。
    dir = ./work/datastore/

    # 起動時に既存データを削除するか否か。
    # （現在効いていません。）
    reset = false
}

# 採掘報酬を受け取るためのアドレスを生成するための秘密文字列。
# （この秘密文字列のバイト列のダイジェスト値が秘密鍵となるアドレスが生成される。）
coinbase.secret = secret

dump {
    block = -1
    clean.on.restart = true
}

vm.structured {
    trace = false
    dir = vmtrace
    compressed = true
    init.storage.limit = 10000
}

# P2PのHelloメッセージに含める文字列。
hello.phrase = hello

# ブロックチェーンに連結するブロックを、ファイルにも記録するか否か。
record.blocks=false

# ブロックをブロックチェーンに連結するのみとし、トランザクションを実行しない場合に真。
blockchain.only=false

# ブロックをネットワークから取得するのではなく、
# ファイルから読み込む場合に、そのファイルが配置されているディレクトリ。
src.blocks.dir=""

# コントラクトのストレージエントリを、
# コントラクト内に同居させるのではなく
# 独立のデータストアで管理する閾値とする個数。
details.inmemory.storage.limit=0

cache {

    flush {

        # 0.7 の場合、メモリ消費率が70%になったら、ディスクにフラッシュする。
        memory = 0.7

        # 10000の場合、10000ブロックごとにディスクにフラッシュする。
        blocks = 10000
    }
}

sync {

    # ブロックを取得して自ノードのチェーンに連結する処理を行うか否か。
    enabled = true

    # １回に要求するハッシュ値の上限数。
    max.hashes.ask = 10000

    # １回に要求するブロックの上限数。
    max.blocks.ask = 100

    # 同期処理において利用しようとするピアの数。
    peer.count = 10
}

