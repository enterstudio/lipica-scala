１、既存環境との完全同期
・時間が経つと？ PING や FIND_NODE に返信がなくなる。
・またactive nodesもidleばかりになる。

・https://github.com/ethereum/go-ethereum/wiki/RLPx-----Node-Discovery-Protocol
・Ping、Pong、Neighboursについて、UDPとTCPのポートを分ける。
・ブロック情報の保存と再生を実行する。
・NewBlockとは何か？
・PeerIdを文字列で扱うのは正式仕様なのか？
・Kademliaのソートを学ぶ。
・KademliaTest test(3)、seed = 1451268255658L で 5000件時にエラー。
・Active Peerについて考えなおす。
・BlockchainImpl の連結失敗時のエラー処理が甘い。
・CallTransactionの変更に追随する。
・もらうブロックはどうやって決まる？　場合によってはもう少し頻繁に flush した方がよいかも。

２、自前ノード間での動作＆トランザクション実行
・miningの具体的な方法を実装する。
・Validationの厳密化とインターフェイス統一。
・実データを見ながらのほうがいいかもしれない。

３、整備
・banの理由。
・再起動するとエラー。
・gracefulな終了を実現する。
・WARNは別のログに出した方が良かろう。
・アウトラインログを作る。（特にマスターのスイッチ）
・refactorする。（init() や start() の整備。future化。）
・logging、refactor、comment。（不具合追跡用）
・ECKeyを実装し直す。（ECの仕様とシステムの仕様を両方よく検討する必要がある。）
・nullを排除する。
・ImmutableBytes#toByteArray を排除する。


とにかく yellow paper を熟読すること。
ethashを学ぶと、mixhashがわかる。

git flowを入れる。

https://github.com/ethereum/tests を活用した自動テストの実行方法を考える。

BlockchainImplの精緻なテスト。
IndexedBlockStoreのテストを充実させる。
VMTest、VMCustomTest、VMComplexTest等々を充実させる。

StorageDictionary関連は、よく意味がわかっていないので後回しとする。
VM関連のデバッグ用出力（ProgramTrace等）。
RepositoryImplのデバッグ用出力。
TransactionExecutorのデバッグ用出力。
LpcHandlerのデバッグ用出力。
PeersPoolのデバッグ用出力。


依存先およびライセンスをまとめる。
楕円曲線暗号について調べる。

sbtによるleveldbのテストの問題？
