WARNは別のログに出した方が良かろう。

パッケージ構造のrefactor。

Ping、Pong、Neighboursについて、UDPとTCPのポートを分ける。
PingにToの情報が欠けているだろう。
expiresの意味も違う。

アウトラインログを作る。（特にマスターのスイッチ）
REST APIをいい感じにする。

ブロック情報の保存と再生を実行する。

Nodeのモデルは早急に改めるべきである。（全体的に不変であるべき。）

NewBlockとは何か？
Kademliaのソートを学ぶ。
KademliaTest test(3)、seed = 1451268255658L で 5000件時にエラー。

Active Peerについて考えなおす。

refactorする。（init() や start() の整備。future化。）
logging、refactor、comment。（不具合追跡用）

BlockchainImpl の連結失敗時のエラー処理が甘い。

もらうブロックはどうやって決まる？　場合によってはもう少し頻繁に flush した方がよいかも。

CallTransactionの変更に追随する。

miningの具体的な方法を実装する。
・実データを見ながらのほうがいいかもしれない。

とにかく yellow paper を熟読すること。

ethashを学ぶと、mixhashがわかる。

git flowを入れる。

gracefulな終了を実現する。

自分どうしで通信し、トランザクションを実行する。

ECKeyを実装し直す。（ECの仕様とシステムの仕様を両方よく検討する必要がある。）

勉強する。
・discovery後、一度切るのか。
・Status後の流れはどうなるか。

https://github.com/ethereum/tests を活用した自動テストの実行方法を考える。

BlockchainImplの精緻なテスト。
IndexedBlockStoreのテストを充実させる。
VMTest、VMCustomTest、VMComplexTest等々を充実させる。

StorageDictionary関連は、よく意味がわかっていないので後回しとする。
VM関連のデバッグ用出力（ProgramTrace等）。
RepositoryImplのデバッグ用出力。
TransactionExecutorのデバッグ用出力。
LpcHandlerのデバッグ用出力。
PeersPoolのデバッグ用出力。

nullを排除する。
ImmutableBytes#toByteArray を排除する。

依存先およびライセンスをまとめる。
楕円曲線暗号について調べる。

sbtによるleveldbのテストの問題？
