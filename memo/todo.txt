46,217以下、しばしば TxTrieRootに齟齬あり。TransactionRoot unmatch @ Block はまずい。要修正。
以下の検算をする。
    2015-12-28 11:32:02.114 WARN  <Block> Tx root unmatch at Block 46,217! TxSize=1  Given: ce660ce4ced8c10a3b882771cb3309394be45dc129ccfa4b6a643a8c50d06751 != Calculated: 8996156e83a9e759229a21cd54c0e3d6c365d92ac68dec32c470d863df766d84 Txs=[f86480850f363b608c82520894c8ebccc5f5689fa8659d83713341e5ad1934944800801ba0618c4bc78adf969c14fd0e0f33a82fcce7d0b3aebde2ab4ffd9c63afb53dd04ca02012a4675e9c5eab65e5f71ffb4749305fb1201fe6ff0bc0413aee0145a96000] [LpcClientWorker-0] Block.scala:280


BlockchainImpl の連結失敗時のエラー処理が甘い。
要求対象のブロックが噛み合わないことがある？（46,192で止まった。）

NewBlockとは何か？
もらうブロックはどうやって決まる？　場合によってはもう少し頻繁に flush した方がよいかも。

Kademliaのソートを学ぶ。
KademliaTest test(3)、seed = 1451268255658L で 5000件時にエラー。

miningの具体的な方法を実装する。
・実データを見ながらのほうがいいかもしれない。

refactorする。（init() や start() の整備。future化。）

logging、refactor、comment。（不具合追跡用）


とにかく yellow paper を熟読すること。

ethashを学ぶと、mixhashがわかる。

git flowを入れる。

gracefulな終了を実現する。


自分どうしで通信し、トランザクションを実行する。

ECKeyを実装し直す。（ECの仕様とシステムの仕様を両方よく検討する必要がある。）


勉強する。
・discovery後、一度切るのか。
・Status後の流れはどうなるか。
yellow paper を読んでわからない所を調べる。

https://github.com/ethereum/tests を活用した自動テストの実行方法を考える。

BlockchainImplの精緻なテスト。
IndexedBlockStoreのテストを充実させる。
VMTest、VMCustomTest、VMComplexTest等々を充実させる。

StorageDictionary関連は、よく意味がわかっていないので後回しとする。
VM関連のデバッグ用出力（ProgramTrace等）。
RepositoryImplのデバッグ用出力。
TransactionExecutorのデバッグ用出力。
LpcHandlerのデバッグ用出力。
PeersPoolのデバッグ用出力。

nullを排除する。
ImmutableBytes#toByteArray を排除する。

依存先およびライセンスをまとめる。
楕円曲線暗号について調べる。

sbtによるleveldbのテストの問題？
