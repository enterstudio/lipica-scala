０、仕様
・external storageの正確な仕様を調べる。

・secp256k1 について学ぶ。
・mdc = modification detection code
・mac = message authentication code
・pending transaction の意味は？
・PeerId を文字列で扱うのは正式仕様なのか？

０、不具合
・[ec2-user@ip-172-30-0-47 lipica]$ <Blockchain> State conflict at Block[BlockNumber=229,084; Hash=81a54835...; ParentHash=890baeb2...; Coinbase=52bc44d5...; Difficulty=7,040,247,001,388]: 3f3f7cb148ac12e268e82f3e9c49c8a0db4eb581f070fbff2fafaf8dfc7d094a != 393f3e494579deff116a9581b9e6db67dd1b5e00e203b4aafc1f500c00f5a4df
2016-01-08 11:19:53.385 INFO  <Blockchain> Trying to connect Block[BlockNumber=229,084; Hash=81a54835...; ParentHash=890baeb2...; Coinbase=52bc44d5...; Difficulty=7,040,247,001,388]. Repos state=f29769c7aec3c6261dc53e0468e0250ddf151ea8e7ff74aa07217e61e2c2e5db [sync-queue-000] BlockchainImpl.scala:141
2016-01-08 11:19:53.385 DEBUG <Blockchain> Appending block: Block[BlockNumber=229,084; Hash=81a54835...; ParentHash=890baeb2...; Coinbase=52bc44d5...; Difficulty=7,040,247,001,388] [sync-queue-000] BlockchainImpl.scala:159
2016-01-08 11:19:53.385 DEBUG <Blockchain> [Valid] Block[BlockNumber=229,084; Hash=81a54835...; ParentHash=890baeb2...; Coinbase=52bc44d5...; Difficulty=7,040,247,001,388] [sync-queue-000] BlockchainImpl.scala:506
2016-01-08 11:19:53.387 DEBUG <Blockchain> Executing Tx[Hash=e7fa86db...; Nonce=4; Sender=be1f2ac71a9703275a4d3ea01a340f378c931740; Receiver=7011f3edc7fa43c81440f9f43a6458174113b162; Value=1,000,000,000,000,000,000; ManaLimit=500,000; ManaPrice=50,000,000,000; Data=53746570...] [sync-queue-000] BlockchainImpl.scala:388
2016-01-08 11:19:53.387 INFO  <TxExecutor> Withdraw in advance: TxManaCost: 25,000,000,000,000,000, ManaPrice: 50,000,000,000, ManaLimit: 500,000 [sync-queue-000] TransactionExecutor.scala:86
2016-01-08 11:19:53.387 DEBUG <TxExecutor> User defined contract invocation: [7011f3edc7fa43c81440f9f43a6458174113b162] [sync-queue-000] TransactionExecutor.scala:139
2016-01-08 11:19:53.387 DEBUG <TxExecutor> Contract loaded: [7011f3edc7fa43c81440f9f43a6458174113b162]=[3,237 bytes] [sync-queue-000] TransactionExecutor.scala:144
2016-01-08 11:19:53.388 DEBUG <Transfer> Transferring 1,000,000,000,000,000,000 from be1f2ac71a9703275a4d3ea01a340f378c931740 to 7011f3edc7fa43c81440f9f43a6458174113b162 [sync-queue-000] Transfer.scala:18
2016-01-08 11:19:53.495 INFO  <TxExecutor> Paying total refund to sender: be1f2ac71a9703275a4d3ea01a340f378c931740. RefundVal=19,988,600,000,000,000. (ManaLeftOver=399,772. ManaRefund=0. EndMana=399,772) [sync-queue-000] TransactionExecutor.scala:231
2016-01-08 11:19:53.495 INFO  <TxExecutor> Paying fee to miner: 52bc44d5378309ee2abf1539bf71de1b7d7be3b5, fee: 5,011,400,000,000,000 [sync-queue-000] TransactionExecutor.scala:236
2016-01-08 11:19:53.498 DEBUG <Blockchain> Total reward for Block[BlockNumber=229,084; Hash=81a54835...; ParentHash=890baeb2...; Coinbase=52bc44d5...; Difficulty=7,040,247,001,388] is 5,000,000,000,000,000,000. (Uncles=0) [sync-queue-000] BlockchainImpl.scala:441
2016-01-08 11:19:53.498 DEBUG <Blockchain> Total difficulty is updated to 939,489,861,385,215,301 [sync-queue-000] BlockchainImpl.scala:533
2016-01-08 11:19:53.498 INFO  <Blockchain> Block[229,084] processed. Summary: [Block[BlockNumber=229,084; Hash=81a54835...; ParentHash=890baeb2...; Coinbase=52bc44d5...; Difficulty=7,040,247,001,388]]. TxSize=1; Chain=[TD=939,489,861,385,215,301; StateRoot=393f3e494579deff116a9581b9e6db67dd1b5e00e203b4aafc1f500c00f5a4df] [sync-queue-000] BlockchainImpl.scala:353
2016-01-08 11:19:53.498 INFO  <Blockchain> Block[229,084] processed. Tx[0]=Tx[Hash=e7fa86db...; Nonce=4; Sender=be1f2ac71a9703275a4d3ea01a340f378c931740; Receiver=7011f3edc7fa43c81440f9f43a6458174113b162; Value=1,000,000,000,000,000,000; ManaLimit=500,000; ManaPrice=50,000,000,000; Data=53746570...]; ManaUsed=100,228; AccumManaUsed=100,228 [sync-queue-000] BlockchainImpl.scala:359

←この問題は、details.inmemory.storage.limit を 16にしたら発生したので、外部ストレージ利用のバグによるある可能性あり。
実際、この呼出に使われたコントラクトは、条件に合致してロードされたばかりだ。
2016-01-08 11:08:36.009 INFO  <ContractDetails> [7011f3ed...] Encoding took 75,946 nanos for 65 entries. (38 bytes) [sync-queue-000] ContractDetailsImpl.scala:171
2016-01-08 11:08:57.613 INFO  <ContractDetails> [7011f3ed...] Decoding took 11,122,219 nanos for 65 entries. (37 bytes) [sync-queue-000] ContractDetailsImpl.scala:194
2016-01-08 11:12:53.250 INFO  <ContractDetails> [7011f3ed...] Encoding took 90,987 nanos for 125 entries. (38 bytes) [sync-queue-000] ContractDetailsImpl.scala:171
2016-01-08 11:13:08.818 INFO  <ContractDetails> [7011f3ed...] Decoding took 9,707,092 nanos for 125 entries. (37 bytes) [sync-queue-000] ContractDetailsImpl.scala:194
2016-01-08 11:16:47.665 INFO  <ContractDetails> [7011f3ed...] Encoding took 2,544,480 nanos for 165 entries. (71,145 bytes) [sync-queue-000] ContractDetailsImpl.scala:171
2016-01-08 11:19:51.289 INFO  <ContractDetails> [7011f3ed...] Decoding took 24,274,033 nanos for 165 entries. (71,141 bytes) [sync-queue-000] ContractDetailsImpl.scala:194

もっと早く出た。
<Blockchain> State conflict at Block[BlockNumber=68,131; Hash=3057ea6f...; ParentHash=52811f08...; Coinbase=f927a40c...; Difficulty=1,964,858,213,527]: 3cc200bd02c4f8abb916afaa799dc730d97256794c8ce10203fde0dfcba475f9 != d2df310ce6dc1d8fba3b3ca7380fd881bad8412d5477b07b9c5159643675117a

←encode / decodeか、snap shotか、どちらかだろう。

１、既存環境との完全同期
・CallTransactionの変更に追随する。
・Ping、Pong、Neighboursについて、UDPとTCPのポートを分ける。
・Active Peerについて考えなおす。

２、自前ノード間での動作＆トランザクション実行
・miningの具体的な方法を実装する。
・実データを見ながらのほうがいいかもしれない。

３、整備
・IndexedBlockStoreの実装がかなり遅い。70万台では、flushに10分以上かかるのが当たり前。MapDBを廃絶することが重要であると思われる。
・Validationの厳密化とインターフェイス統一。
・再起動するとエラー。
・gracefulな終了を実現する。
・expirationによるdiscardを実装する。（replay attack対策）
・アウトラインログを作る。
・refactorする。（init() や start() の整備。future化。）
・logging、refactor、comment。（不具合追跡用）
・ECKeyを実装し直す。（ECの仕様とシステムの仕様を両方よく検討する必要がある。）
・スレッドセイフティ

・多数のJARファイルは、ディスクリプタ数の面で非常に不利。
・nullを排除する。
・ImmutableBytes#toByteArray を排除する。

とにかく yellow paper を熟読すること。
ethashを学ぶと、mixhashがわかる。

git flowを入れる。

https://github.com/ethereum/tests を活用した自動テストの実行方法を考える。

BlockchainImplの精緻なテスト。
IndexedBlockStoreのテストを充実させる。
VMTest、VMCustomTest、VMComplexTest等々を充実させる。

StorageDictionary関連は、よく意味がわかっていないので後回しとする。
VM関連のデバッグ用出力（ProgramTrace等）。
RepositoryImplのデバッグ用出力。
TransactionExecutorのデバッグ用出力。
LpcHandlerのデバッグ用出力。
PeersPoolのデバッグ用出力。


依存先およびライセンスをまとめる。
楕円曲線暗号について調べる。

sbtによるleveldbのテストの問題？
