０、仕様
・secp256k1 について学ぶ。
・mdc = modification detection code
・mac = message authentication code

０、不具合
leveldbの問題。
org.iq80.leveldb.DBException: IO error: D:\work\20160114\lipica\work\database\contract_dtl_storage\de0b295669a9fd93d5f28d9ec85e40f4cb697bae\000008.sst: Could not create random access file.
https://github.com/fusesource/leveldbjni/issues/28

BDB化すればWindowsでもOK？
http://www.oracle.com/technetwork/jp/database/berkeleydb/je-faq-086588-ja.html
http://www.oracle.com/technetwork/database/berkeleydb/downloads/maven-087630.html
http://mvnrepository.com/artifact/com.sleepycat/je/5.0.73

１、既存環境との完全同期
・CallTransactionの変更に追随する。
・Ping、Pong、Neighboursについて、UDPとTCPのポートを分ける。
・Active Peerについて考えなおす。

２、自前ノード間での動作＆トランザクション実行
・miningの具体的な方法を実装する。
・walletを実装する。
・実データを見ながらのほうがいいかもしれない。

３、整備
・フロントエンドを整備する。
・ECKeyを実装し直す。（ECの仕様とシステムの仕様を両方よく検討する必要がある。）
・トランザクション署名の検証。

・著作権表記
・依存先バージョン

・アウトラインログを作る。
・refactorする。（init() や start() の整備。future化。）
・logging、refactor、comment。（不具合追跡用）

・expirationによるdiscardを実装する。（replay attack対策）
・スレッドセイフティ

・nullを排除する。
・ImmutableBytes#toByteArray を排除する。

とにかく yellow paper を熟読すること。
ethashを学ぶと、mixhashがわかる。

git flowを入れる。


BlockchainImplの精緻なテスト。
VM関連のデバッグ用出力（ProgramTrace等）。
RepositoryImplのデバッグ用出力。
TransactionExecutorのデバッグ用出力。
LpcHandlerのデバッグ用出力。
PeersPoolのデバッグ用出力。

